{"version":3,"file":"server.js","sources":["../src/server/models/User.js","../src/server/controllers/AuthController.js","../src/server/helpers/SurveyHelper.js","../src/server/helpers/courseData.js","../src/server/controllers/surveyController.js","../src/server/routes/index.js","../src/server/config/middleware/mongoose.js","../src/server/config/passport.js","../src/server/server.js"],"sourcesContent":["import mongoose, { SchemaTypes } from \"mongoose\";\nconst Schema = mongoose.Schema;\nimport passportLocalMongoose from \"passport-local-mongoose\";\nimport mongooseAutoPopulate from \"mongoose-autopopulate\";\n\nconst WORK_FACTOR = 10;\n\nconst ClassSchema = new Schema({\n  _id: Number,\n  name: {\n    type: String,\n  },\n  teachers: {\n    type: Array,\n    default: [\"\"],\n  },\n  dateStart: {\n    type: Date,\n    default: \"2023-04-06\",\n  },\n  dateEnd: {\n    type: Date,\n    default: \"2023-04-30\",\n  },\n  weeks: Number,\n  classRating: {\n    type: Number,\n    default: 5,\n  },\n  difficultyRating: {\n    type: Number,\n    default: 5,\n  },\n  explanationRating: {\n    type: Number,\n    default: 5,\n  },\n  personalUnderstanding: {\n    type: Number,\n    default: 5,\n  },\n});\n\n// ClassSchema.plugin(mongooseAutoPopulate);\n\nconst UserSchema = new Schema({\n  id: Number,\n  name: String,\n  email: {\n    type: String,\n  },\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  password: String,\n  classes: [\n    {\n      type: ClassSchema,\n    },\n  ],\n  admin: Boolean,\n  currentClass: String,\n});\n\n// UserSchema.plugin(mongooseAutoPopulate);\nUserSchema.plugin(passportLocalMongoose);\n\n// UserSchema.pre('save', async function (next) {\n//   const salt = await bcrypt.genSalt();\n//   this.password = await bcrypt.hash(this.password, salt);\n//   next();\n// });\n\n// UserSchema.statics.login = async function (username, password) {\n//   console.log('loginschema');\n//   console.log(username + password);\n//   let user = await this.findOne({ username });\n//   if (user) {\n//     console.log(user);\n//     console.log('compare pass')\n//     console.log(password)\n//     console.log(user.password)\n//     let isAuthenticated = await bcrypt.compare(username, user.password);\n//     if (isAuthenticated) {\n//       return user;\n//     } else {\n//       throw Error('Incorrect password');\n//     }\n//   } else {\n//     throw Error('Incorrect email');\n//   }\n// };\n\n// UserSchema.pre('save', function (next) {\n// \tconst user = this;\n// \t// only hash the password if it has been modified (or is new)\n// \tif (!user.isModified('password')) {\n// \t\treturn next();\n// \t}\n// \t// generate a salt\n// \tbcrypt.genSalt(WORK_FACTOR, function (err, salt) {\n// \t\tif (err) return next(err);\n\n// \t\t// hash the password along with our new salt\n// \t\tbcrypt.hash(user.id, salt, function (err, hash) {\n// \t\t\tif (err) return next(err);\n\n// \t\t\t// override the cleartext id with the hashed one\n// \t\t\tuser.id = hash;\n// \t\t\t// let mongoose know we're done now that we've hashed the plaintext password\n// \t\t\tnext();\n// \t\t});\n// \t});\n// });\n\n// UserSchema.methods.validatePassword = function (candidatePassword) {\n// \treturn new Promise((resolve, reject) => {\n// \t\tUser.compare(candidatePassword, this.password, function (err, isMatch) {\n// \t\t\tif (err) return reject(err);\n// \t\t\tresolve(isMatch);\n// \t\t});\n// \t});\n// };\n\nconst User = mongoose.model(\"User\", UserSchema);\nexport const Class = mongoose.model(\"Class\", ClassSchema);\nexport default User;\n","import passport from 'passport';\nimport passportLocal from 'passport-local';\nimport User from '../models/User.js';\nimport express from 'express';\nimport jwt from 'passport-jwt';\nimport { Error } from 'mongoose';\nconst app = express();\n\nexport const register = async (req, res, next) => {\n  try {\n    let data = {\n      layout: 'base.njk',\n      title: 'Welcome',\n    };\n\n    res.render('register.njk', data);\n  } catch (err) {\n    let data = {\n      error: { message: err },\n      layout: 'base.njk',\n    };\n    res.render('register.njk', data);\n    next();\n  }\n};\n\n// export const doRegister = async (req, res, next) => {\n//   let newUser = new User(req.body);\n//   newUser.provider = 'local';\n// \tconst user = await User.findOne({ email: newUser.email }).exec();\n// \tif (!user) {\n// \t\ttry {\n// \t\t\tawait newUser.save();\n//   \t  await req.login(newUser);\n//     \treturn res.redirect('/survey/');\n// \t\t} catch (err) {\n// \t\t\tconsole.log(err)\n// \t\t\treturn res.render('register.njk', {\n// \t\t\t\tlayout: 'base.njk',\n// \t\t\t\terror: {message: err},\n// \t\t\t\tuser: newUser,\n// \t\t\t});\n// \t\t}\n// \t} else {\n// \t\treturn res.render('register.njk', {\n// \t\t\tlayout: 'base.njk',\n// \t\t\terror: { message: user },\n// \t\t\tuser: newUser,\n// \t\t});\n// \t}\n// }\n\nexport const doRegister = async (req, res, next) => {\n  const { username, email, password, name, id } = req.body;\n  let data = {\n    layout: 'base.njk',\n    title: 'Welcome',\n    error: null,\n    message: '',\n    succes: '',\n  };\n\n  try {\n    await User.register(\n      new User({\n        username: req.body.username,\n        email: req.body.username,\n        name: req.body.name,\n        id: id,\n      }),\n      username,\n      function (err, user) {\n        if (err) {\n          data.succes = false;\n          data.message = err;\n\n          res.render('register.njk', data);\n        } else {\n          req.login(user, (er) => {\n            if (er) {\n              data.succes = false;\n              data.message = er;\n              res.render('register.njk', data);\n            } else {\n              res.redirect('/course/start');\n            }\n          });\n        }\n      }\n    );\n  } catch (error) {\n    next(error);\n  }\n};\n\n// export const doRegister = async (req, res, next) => {\n\n// \t// const user = new User({username: req.body.username})\n// \t// await user.register(req.body.username, req.body.password)\n// \t// await user.save();\n\n// \t// const authenticate = User.authenticate();\n\n// \t// authenticate(req.body.username, req.body.password, function(err, result) {\n// \t// \tif (err) next(err)\n\n// \t// \t// Value 'result' is set to false. The user could not be authenticated since the user is not active\n// \t// });\n// \tconsole.log('registering user');\n// \tUser.register(\n// \t\tnew User({ username: req.body.username, id: req.body.id, name: req.body.name }),\n// \t\treq.body.password,\n// \t\tfunction (err) {\n// \t\t\tif (err) {\n// \t\t\t\tconsole.log('error while user register!', err);\n// \t\t\t\treturn next(err);\n// \t\t\t}\n\n// \t\t\tres.locals.user = req.user;\n// \t\t\tconsole.log('user registered!');\n\n// \t\t\t// req.session.save(function (err) {\n// \t\t\t//   if (err) return next(err);\n// \t\t\t//   res.redirect('/');\n// \t\t\t// });\n\n// \t\t\tres.redirect('/survey/');\n// \t\t}\n// \t\t)\n\n// \t}\n\nexport const login = async (req, res, next) => {\n  const { username, email, password, name, id } = req.body;\n  let data = {\n    layout: 'base.njk',\n    title: 'Welcome',\n    error: null,\n    message: '',\n  };\n\n  try {\n    res.render('login.njk', {\n      layout: 'base.njk',\n    });\n  } catch (err) {\n    let data = {\n      error: { message: err },\n      layout: 'base.njk',\n    };\n    res.render('login.njk', data);\n    next();\n  } finally {\n  }\n};\n\n// export const doLogin = (req, res, next) => {\n// \tpassport.authenticate('local', {\n// \tsuccessRedirect: \"/survey/\",\n// \tfailureRedirect: \"/login\",\n// \tfailureFlash: 'failed'\n// },function(req, res, next) {\n// \tpassport.authenticate('local', function(err, user, info) {\n// \t\t\treturn done(null, false, {\n// \t\t\t\t\tmessage: err\n// \t\t\t});\n// \t});\n// })}\n\nexport const doLogin = async (req, res, next) => {\n  const { username, email, password, name, id } = req.body;\nconsole.log(req.body)\n\n  let data = {\n    layout: 'base.njk',\n    title: 'Welcome',\n    error: null,\n    message: '',\n    error: '',\n  };\n  try {\n    if (username) {\n      console.log(username)\n      await User.findByUsername(username, username, function (err, user) {\n        if (err) {\n          console.log(err);\n          data.succes = false;\n          data.error = err;\n          res.render('login.njk', data);\n        } else {\n          req.login(user, (er) => {\n            if (er) {\n              console.log(er);\n              data.succes = false;\n              data.error = 'Email not found';\n              res.render('login.njk', data);\n            } else {\n              res.redirect('/course/start');\n            }\n          });\n        }\n      });\n    } else {\n      res.render('login.njk', data);\n    }\n  } catch (error) {\n    res.render('login.njk', data);\n    next(error);\n  }\n};\n\nexport const doLoginOLD = (req, res, next) => {\n  const { password, username } = req.body;\n\n  // try {\n  // \tconst findThisUser = User.findByUsername(username)\n  // \treturn User.authenticate('local', findThisUser)\n  // } catch (err) {\n  // \tnext(err)\n  // }\n\n  if (!req.body.username) {\n    res.json({ success: false, message: 'Username was not given' });\n  } else if (!req.body.password) {\n    res.json({ success: false, message: 'Password was not given' });\n  } else {\n    console.log(req.body);\n    passport.authenticate('local', function (err, user, info, status) {\n      console.log(user);\n      if (err) {\n        res.json({ success: false, message: 'unknown error' });\n        next(err);\n      } else {\n        if (!user) {\n          res.json({\n            success: false,\n            message: 'username or password incorrect',\n          });\n        } else {\n          const signInUser = User.findByUsername(user.username, user.password);\n          console.log(signInUser);\n          req.logIn(user, (er) => {\n            if (er) {\n              res.json({ success: false, message: er });\n            } else {\n              console.log('user login');\n              console.log(user);\n            }\n          });\n          // req.login(user, (er) => {\n          // \tif (er) {\n          // \t\tres.json({ success: false, message: er });\n          // \t} else {\n          // \t\tres.json({ success: true, message: 'Your account has been saved' });\n          // \t}\n          // });\n          console.log(user);\n          res.redirect('/classes');\n        }\n      }\n    })(req, res, next);\n  }\n};\n\nexport const logout = (req, res, next) => {\n  req.logout((err) => {\n    if (err) {\n      return next(err);\n    }\n    res.redirect('/login');\n  });\n};\n\n// try {\n\n// \t  User.findOne({\n// \t    username: newUser.username,\n// \t  }).exec(function (err, user) {\n// \t    if (err) return next(err);\n// \t    if (!user) {\n// \t      newUser.save(function (err) {\n// \t        if (err) {\n// \t          return res.render('error.njk', {\n// \t            errors: req.flash,\n// \t            user: newUser,\n// \t          });\n// \t        }\n// \t        req.logIn(newUser, function (err) {\n// \t          if (err) return next(err);\n// \t          return res.redirect('/');\n// \t        });\n// \t      });\n// \t    } else {\n// \t      return res.render('error.njk', {\n// \t\t\t\t\tlayout:  'base.njk',\n// \t        errors: [\n// \t          {\n// \t            message: 'email already registered',\n// \t          },\n// \t        ],\n// \t        user: newUser,\n// \t      });\n// \t    }\n// \t  });\n// } catch (err) {\n// \tnext()\n// }\n\n// Post login\n","import User, { Class } from \"../models/User.js\";\n\nexport const saveClasses = (username, classes) => {\n  return new Promise(async (resolve, reject) => {\n    // let {name, teachers, dateStart,dateEnd, weeks, classRating, difficulityRating, explanationRating, personalUnderstanding} = classInfo;\n    try {\n      const user = await User.findByUsername(username);\n      // let newUserInfo = ({\n      // \tname: name,\n      // \tplatforms: platforms,\n      // \tgenres: genres,\n      // \tabout: about\n      // });\n\n      await classes.forEach((element) => {\n       user.classes.set({\n          name: element,\n        });\n      });\n\n      // user.classes.set({\n      // \tname: name,\n      // });\n      await user.save();\n      resolve(\"user\");\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\nexport const addClass = (userID, ClassName) => {\n  console.log(userID)\n  return new Promise(async (resolve, reject) => {\n    try {\n      let classItem = {\n        name: ClassName,\n      };\n      const user = await User.findById(userID);\n      const checkDup = await user.classes.some(\n        (item) => item.name !== classItem.name\n      );\n      console.log(ClassName);\n\n      if (!checkDup) {\n        user.classes.push(classItem);\n        await user.save();\n      }\n      resolve(\"has resolved\");\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\nexport const updateClass = (userID, classID, classInfo) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let {\n        dateStart,\n        dateEnd,\n        classRating,\n        difficultyRating,\n        explanationRating,\n        personalUnderstanding,\n      } = classInfo;\n      const user = await User.findById(userID);\n      const currentClass = await user.classes.findOneAndUpdate(classID);\n      currentClass.set({\n        dateStart: dateStart,\n        dateEnd: dateEnd,\n        classRating: classRating,\n        difficultyRating: difficultyRating,\n        explanationRating: explanationRating,\n        personalUnderstanding: personalUnderstanding,\n      });\n      user.save();\n      resolve(\"has resolved\");\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\nexport const myClasses = (userID) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const user = await User.findById(userID)\n        .select(\"classes\")\n        .populate(\"classes\");\n      resolve(user.classes);\n    } catch (err) {\n      reject({\n        type: \"error\",\n      });\n    }\n  });\n};\n\nexport const getFirstClass = (userID) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const user = await User.findById(userID);\n      if (user) {\n        const firstClass = user.classes[0];\n        return firstClass;\n      }\n      resolve(firstClass);\n    } catch (err) {\n      reject({\n        type: \"error\",\n      });\n    }\n  });\n};\n","export const courseData = [\n  {\n    id: 1,\n    name: \"Css to the rescue\",\n    slug: \"css-to-the-rescue\",\n    url: \"/css-to-the-rescue\",\n    teachers: [\"Sanne\", \"Vasilis\"],\n    dateStart: \"06-02-2023\",\n    dateEnd: \"06-03-2023\",\n    weeks: 4,\n    classRating: Number,\n    difficultyRating: Number,\n    explanationRating: Number,\n    personalUnderstanding: String,\n    prevCourse: '/start',\n    nextCourse: \"/web-app-from-scratch\",\n  },\n  {\n    id: 2,\n    name: \"Webapp from Scratch\",\n    slug: \"web-app-from-scratch\",\n    url: \"/web-app-from-scratch\",\n    teachers: [\"Robert\", \"Joost\"],\n    dateStart: \"06-02-2023\",\n    dateEnd: \"06-03-2023\",\n    weeks: 4,\n    classRating: Number,\n    difficultyRating: Number,\n    explanationRating: Number,\n    personalUnderstanding: String,\n    prevCourse: \"/css-to-the-rescue\",\n    nextCourse: \"/progressive-web-apps\",\n  },\n  {\n    id: 3,\n    name: \"Progressive Web App\",\n    slug: \"progressive-web-apps\",\n    url: \"/progressive-web-apps\",\n    teachers: [\"Janno\", \"Declan\"],\n    dateStart: \"20-03-2023\",\n    dateEnd: \"03-03-2023\",\n    weeks: 3,\n    classRating: Number,\n    difficultyRating: Number,\n    explanationRating: Number,\n    personalUnderstanding: String,\n    prevCourse: \"/web-app-from-scratch\",\n    nextCourse: \"/browser-technologies\",\n  },\n  {\n    id: 4,\n    name: \"Browser Technologies\",\n    slug: \"browser-technologies\",\n    url: \"/browser-technologies\",\n    teachers: [\"Vasillis\", \"Peter-Paul\"],\n    dateStart: \"20-03-2023\",\n    dateEnd: \"03-03-2023\",\n    weeks: 3,\n    classRating: Number,\n    difficultyRating: Number,\n    explanationRating: Number,\n    personalUnderstanding: String,\n    prevCourse: \"/progressive-web-apps\",\n    nextCourse: \"/end\",\n  },\n];\n","import passport from \"passport\";\nimport User, { Class } from \"../models/User.js\";\nimport { addClass, updateClass } from \"../helpers/SurveyHelper.js\";\nimport { user } from \"../config/middleware/auth.js\";\nimport { courseData } from \"../helpers/courseData.js\";\n\nconsole.log(courseData)\n\nconst classes = [\n  \"css-to-the-rescue\",\n  \"web-app-from-scratch\",\n  \"browser-technologies\",\n  \"progressive-web-apps\",\n];\n\nexport const start = (req, res, next) => {\n  let data = {\n    message: \"Hello world!\",\n    layout: \"base.njk\",\n    title: \"Start Survey\",\n    user: req.user,\n    userClasses: req.user.classes,\n    classes: courseData,\n    error: null\n  };\n  try {\n    console.log(req.body);\n    \n    console.log(\"requser\");\n    console.log(req.user);\n    res.render(\"survey-start.njk\", data);\n  } catch (err) {\n    data.error = err;\n    res.render(\"survey-start.njk\", data);\n    next(err);\n  }\n};\n\nexport const saveClasses = (req, res, next) => {\n  let data = {\n    message: \"Hello world!\",\n    layout: \"base.njk\",\n    title: \"Nunjucks example\",\n    user: req.user,\n    userClasses: null,\n    classes: courseData,\n    error: null\n  };\n  \n\n  if (!req.user) return res.redirect('/login')\n\n  const userID = req.user._id;\n  // const classInfo = req.body;\n\n  // console.log(userID)\n  try {\n    const { user } = req.user;\n    console.log(req.user)\n    \n    const selectedClasses = req.body.classes;\n    console.log(selectedClasses);\n\n    // const thisUser = await User.findById(userID);\n    // data.classes = thisUser.classes\n\n    if (classes.some((obj) => obj.name == selectedClasses)) {\n      // classID === obj._id;\n      console.log('if')\n      // console.log(classID);\n      // return res.redirect(`/course/survey/${classes[0].name}`)\n    } else {\n      console.log('else')\n      // console.log(\"no calss page\");\n    }\n\n\n\n\nif  (!req.user.classes) {\n   Promise.all(selectedClasses.map(async (element) => {\n    console.log('element');\n    console.log(element);\n\n    console.log(\"1\");\n    // console.log(thisUser);\n    let alreadyExists = req.user.classes.some(\n      (item) => item.name == element\n    );\n\n    if (!alreadyExists) {\n      await addClass(userID, element);\n      console.log(\"classes saved\");\n    } else {\n      console.log(`${element} already in user classes`);\n      // res.redirect('/course/css-to-the-rescue')\n      \n    }\n  }));\n} else {\n  return res.redirect('/course/css-to-the-rescue')\n}\n  \n\n\n\n    // await selectedClasses.forEach(async (element) => {\n    //   console.log(element);\n\n    //   console.log(\"1\");\n    //   console.log(thisUser);\n    //   let alreadyExists = await thisUser.classes.some(\n    //     (item) => item.name == element\n    //   );\n\n    //   if (alreadyExists) {\n    //     console.log(`${element} already in user classes`);\n        \n    //   } else {\n    //     await addClass(userID, element);\n    //     console.log(\"classes saved\");\n    //     // const UserClasses = await User.findById(userID).classes;\n    //   }\n\n    //   // try {\n    //   //   console.log(\"alreadyExists\");\n    //   //   console.log(alreadyExists);\n\n      \n    //   //   console.log(\"2\");\n    //   //   console.log(thisUser);\n    //   //   res.redirect(\"/course/css-to-the-rescue\");\n    //   // } catch (err) {\n    //   //   next(err);\n    //   // }\n    // });\n    console.log(\"3\");\n    // console.log(thisUser);\n    // const UserClasses = await User.findById(userID).classes;\n\n    // if (UserClasses) res.redirect(`/course/${UserClasses[0].name}`);\n    // if (thisUser.classes[0].name !== undefined) {\n    //   await res.redirect(`/course/${thisUser.classes[0].name}`);\n    // } else {\n    //   res.redirect(\"back\");\n    // }\n    res.render(\"survey-start.njk\", data);\n    next()\n  } catch (err) {\n    // data.error = err\n    next(err);\n  }\n};\n\nexport const surveyClass = async (req, res, next) => {\n  try {\n    const className = req.params.id;\n    // let classID = req.params.id;\n    const { user } = req.user;\n    const userID = req.user._id;\n    // let thisClass = await User.findById(classID);\n    const thisUser = await User.findById(userID);\n\n    const { classes } = thisUser;\n    // console.log(\"classes\");\n    // console.log(classes);\n    // const {classes} = user;\n    // console.log(user);\n    // if(classID)\n    if (classes.some((obj) => obj.name == className)) {\n      classID === obj._id;\n      // console.log(classID);\n      // return res.redirect(`/course/survey/${classes[0].name}`)\n    } else {\n      // console.log(\"no calss page\");\n    }\n    let data = {\n      message: \"1\",\n      layout: \"base.njk\",\n      title: \"Nunjucks example\",\n      user: req.user,\n      classes: thisUser.classes,\n      currentClass: req.params.name,\n      currentPage: req.route.path,\n      firstClass: thisUser.classes[0],\n      secondClass: thisUser.classes[1],\n      thirdClass: thisUser.classes[2],\n      fourthClass: thisUser.classes[3],\n    };\n    for (let i of classes) {\n      if (i.name == req.params.id) {\n        // console.log(i);\n        data = {\n          message: \"2\",\n          layout: \"base.njk\",\n          title: \"Nunjucks example\",\n          user: req.user,\n          currentClass: i,\n          nextClass: (i += 1),\n          classes: thisUser.classes,\n        };\n      }\n    }\n\n    res.render(\"survey-class.njk\", data);\n  } catch (err) {\n    // console.log(err);\n    next(err);\n  }\n};\n\nexport const postSurveyClass = async (req, res, next) => {\n  try {\n    // console.log(req.body);\n    const userID = req.user._id;\n    const classID = req.params.name;\n    const thisUser = await User.findById(userID);\n    const thisClass = await Class.findById(classID);\n    const { classInfo } = req.body;\n\n    // await updateClass(userID, classID, classInfo);\n    console.log(classInfo);\n    const { classes } = req.user;\n  } catch (err) {\n    console.log(err);\n    next(err);\n  }\n};\n\nconst filterValue = (obj, key, value) => obj.filter((v) => v[key] === value);\n\nconst getObjBySlug = (objArray, slug) => {\n//   console.log('objArray')\n\n//   console.log(objArray)\n//   console.log('slug')\n// console.log(slug)\n\n  return objArray.find((obj) => obj.slug === slug);\n  }\n\nexport const courseElement = async (req, res, next) => {\n\n\n\n\n  const user = req.user;\n  // console.log(\"req.params\");\n  // console.log(req.params.path);\n  \n  const path = req.route.path;\n  // const currentCourse = filterValue(courseData, 'slug', path)\n  // console.log('path')\n  // console.log(path)\n\n  let pathArray = req.route.path.split('/');\n  let currentSlug = pathArray[2].toString();\n\n  \n  // console.log(\"currentSlug\");\n  // console.log(currentSlug);\n  // console.log('courseData');\n  // console.log(courseData);\n  \n\n  const currentCourse = await getObjBySlug(courseData, currentSlug);\n\n  // console.log(\"currentCourse\");\n  // console.log(currentCourse);\n  \n  try {\n    let data = {\n      user: user,\n      message: \"\",\n      layout: \"base.njk\",\n      title: \"Nunjucks example\",\n      classes: courseData,\n      currentClass: currentCourse,\n      currentCourse: currentCourse,\n      currentPage: req.params.id,\n      nextCourse: currentCourse.nextCourse,\n      prevCourse: currentCourse.prevCourse,\n    };\n\n    res.render(\"survey-class.njk\", data);\n  } catch (error) {\n    console.log(\"courseElement error\")\n    console.log(error);\n    next(error)\n  }\n};\n","import express from \"express\";\n\nimport { saveData } from \"../helpers/saveData.js\";\nimport bodyParser from \"body-parser\";\nimport multer from \"multer\";\nimport User from \"../models/User.js\";\n\nimport {\n  register,\n  doRegister,\n  login,\n  doLogin,\n  logout,\n} from \"../controllers/AuthController.js\";\nimport {\n  start,\n  surveyClass,\n  saveClasses,\n  postSurveyClass,\n  courseElement,\n} from \"../controllers/SurveyController.js\";\n// import {default as homeRoutes} from './homeRoutes.js';\nimport connectEnsureLogin from \"connect-ensure-login\";\n// import homeRoutes from \"./homeRoutes.js\";\n// import authRoutes from \"./authRoutes.js\";\n// import surveyRoutes from \"./surveyRoutes.js\";\nimport { isAuthenticated } from \"../config/middleware/auth.js\";\nimport { courseData } from \"../helpers/courseData.js\";\n\n\nconst upload = multer();\nconst router = express.Router();\n// export const indexRouter = (req, res, next) => {\n\n// }\n\n// router.use(\"/\", authRoutes);\n\nrouter.get(\"/\", doRegister);\nrouter.post(\"/\", upload.array(), doRegister);\n\nrouter.get(\"/login\", doLogin);\nrouter.post(\"/login\", upload.array(), doLogin);\n\nrouter.get(\"/register\", register);\nrouter.post(\"/register\", upload.array(), doRegister);\n\nrouter.get(\"/logout\", logout);\nrouter.post(\"/logout\", logout);\n\n// router.use(\"/course\", surveyRoutes);\n\n\n\n\n// router.get(\"/course\", (req, res, next) => {\n//   res.redirect(\"/login\");\n// });\n\nrouter.get(\"/course/start\", start);\nrouter.post(\"/course/start\", upload.array(), saveClasses);\n\n\n\nrouter.get(\"/course/end\", (req, res, next) => {\n  let data = {\n    user: req.user,\n    classes: courseData\n  };\n\n  res.render(\"survey-end.njk\", data);\n});\n\n\n\ncourseData.forEach((course) => {\n  console.log(\"Name: \" + course.name + \", Route: \" + course.slug);\n  router.get(`/course/${course.slug}`, courseElement);\n});\n\nrouter.post(\"/course/:id\", upload.none(), postSurveyClass);\n\n\n// router.get('/welcome', async (req, res, next)=> {\n// const user = req.user;\n\n// try {\n\n// } catch (error) {\n\n// }\n\n// })\n\n// module.exports = router\n\nexport default router;\n","import mongoose from \"mongoose\";\nimport session from \"express-session\";\nexport default () => {\n  mongoose.Promise = global.Promise;\n  return mongoose.connect(process.env.MONGO_DB, {\n    dbName: process.env.DB_NAME,\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n  });\n};\n","import session from \"express-session\";\nimport cookieParser from \"cookie-parser\";\nimport cookieSession from \"cookie-session\";\nimport passport from \"passport\";\nimport flash from \"connect-flash\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\n// import LocalStrategy from 'passport-local-mongoose';\n\nimport User from \"../models/User.js\";\nimport mongoose from \"mongoose\";\nimport { connect } from \"mongoose\";\n\nconst newLocalStrategy = LocalStrategy.Strategy;\n// const newMongoStore = MongoStore(session)\n\nexport default function (app) {\n  app.use(cookieParser(process.env.SESSION_SECRET));\n  // app.use(cookieSession({\n  // \tkeys: [process.env.SESSION_SECRET, 'key2']\n  // }))\n  app.use(\n    session({\n      // this should be changed to something cryptographically secure for production\n      secret: process.env.SESSION_SECRET,\n      resave: false,\n      saveUninitialized: true,\n      // automatically extends the session age on each request. useful if you want\n      // the user's activity to extend their session. If you want an absolute session\n      // expiration, set to false\n      rolling: true,\n      name: \"localhost\",\n      // set your options for the session cookie\n      cookie: {\n        httpOnly: false,\n        sameSite: false,\n        // the duration in milliseconds that the cookie is valid\n        maxAge: 60 * 60 * 1000, // 20 minutes\n        // recommended you use this setting in production if you have a well-known domain you want to restrict the cookies to.\n        // domain: 'party-finderr.herokuapp.com',\n        // recommended you use this setting in production if your site is published using HTTPS\n        // secure: true,\n      },\n    })\n  );\n\n  // passport.serializeUser((user, done) => {\n  // \tdone(null, user);\n  // });\n  // passport.deserializeUser(async (userId, done) => {\n  // \tawait User.findById(userId.id)\n  // \t\t.then(function (user) {\n  // \t\t\tdone(null, user);\n  // \t\t})\n  // \t\t.catch(function (err) {\n  // \t\t\tdone(err);\n  // \t\t});\n  // });\n\n  // passport.use(User.createStrategy());\n\n  // passport.use(new LocalStrategy.Strategy(User.authenticate()));\n\n  const authUser = (user, password, done) => {\n    //Search the user, password in the DB to authenticate the user\n    //Let's assume that a search within your DB returned the username and password match for \"Kyle\".\n    return done(null, authenticated_user);\n  };\n\n  passport.use(User.createStrategy());\n\n  // passport.use(new LocalStrategy(\n  // \tfunction(user, password, done) {\n  // \t\tconsole.log(user)\n  // \t\tUser.findByUsername({ username: user, selectHashSaltFields: true }, function(err, user) {\n  // \t\t\tif (err) { return done(err); }\n  // \t\t\tif (!user) { return done(null, false); }\n  // \t\t\tif (!user.validPassword(password)) { return done(null, false); }\n  // \t\t\treturn done(null, {user});\n  // \t\t});\n  // \t}\n  // ));\n\n  // passport.serializeUser(function(user, done) {\n  // \tdone(null, user);\n  //  });\n\n  //  passport.deserializeUser(function(user, done) {\n  // \tdone(null, user);\n  //  });\n  //  passport.serializeUser(function(user, done) {\n  // \tdone(null, user.id);\n  // });\n\n  // passport.deserializeUser(function(id, done) {\n  // \tUser.findById(_id, function (err, user) {\n  // \t\tif(err){\n  //       done(null, false, {error:err});\n  //   } else {\n  //       done(null, user);\n  //   }\n  // \t});\n  // });\n  passport.serializeUser(User.serializeUser());\n  passport.deserializeUser(User.deserializeUser());\n  // passport.use(new LocalStrategy((usernameField, passwordField, done) => {\n  // \tconst errorMsg = 'Invalid username or password';\n  // \tUser.findOne({\n  // \t\tusername: usernameField,\n  // \t\tpassword: usernameField,\n  // \t\tpassReqToCallback : true\n  // \t})\n  // \t\t.then(user => {\n  // \t\t\t// if no matching user was found...\n  // \t\t\tif (!user) {\n  // \t\t\t\treturn done(null, false, {\n  // \t\t\t\t\tmessage: errorMsg\n  // \t\t\t\t});\n  // \t\t\t}\n  // \t\t\t// call our validate method, which will call done with the user if the\n  // \t\t\t// passwords match, or false if they don't\n  // \t\t\treturn user.validatePassword(password)\n  // \t\t\t\t.then(isMatch => done(null, isMatch ? user : false, isMatch ? null : {\n  // \t\t\t\t\tmessage: errorMsg\n  // \t\t\t\t}));\n  // \t\t})\n  // \t\t.catch(done);\n  // }));\n  // initialize passport. this is required, after you set up passport but BEFORE you use passport.session (if using)\n  app.use(passport.initialize());\n  // only required if using sessions. this will add middleware from passport\n  // that will serialize/deserialize the user from the session cookie and add\n  // them to req.user\n  app.use(passport.session());\n}\n\n// export default passportMiddleware;\n\n// const { MongoClient, ServerApiVersion } = require('mongodb');\n// const uri = \"mongodb+srv://admin:<password>@browsertech.amdujfn.mongodb.net/?retryWrites=true&w=majority\";\n// const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true, serverApi: ServerApiVersion.v1 });\n// client.connect(err => {\n//   const collection = client.db(\"test\").collection(\"devices\");\n//   // perform actions on the collection object\n//   client.close();\n// });\n\n// 'mongodb+srv://admin:<password>@browsertech.amdujfn.mongodb.net/?retryWrites=true&w=majority'\n","import express from \"express\";\nimport ViteExpress from \"vite-express\";\nimport { createServer as createViteServer } from \"vite\";\nimport bodyParser from \"body-parser\";\nimport nunjucks from \"nunjucks\";\nimport expressNunjucks from \"express-nunjucks\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport logger from \"morgan\";\nimport flash from \"connect-flash\";\nimport cookieParser from \"cookie-parser\";\nimport dotenv from \"dotenv\";\nimport fs from \"node:fs\";\nimport multer from \"multer\";\nimport routes from \"./routes/index.js\";\n// import mongoose from 'mongoose';\nimport mongoose from \"./config/middleware/mongoose.js\";\nimport passport from \"./config/passport.js\";\nimport cors from \"cors\";\nimport compression from \"compression\";\n\ndotenv.config();\n\n// const isDev = process.env.NODE_ENV === 'development'\n\nconst upload = multer();\nconst PORT = process.env.PORT || 3000;\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// const classes = \"web-app-from-scratch\", \"css-to-the-rescue-2223\"\n\n// const classes = [{\n//   web-app-from-scratch: {\n\n//   },\n//   css-to-the-rescue-2223: {\n\n//   }\n// }\n\n// ]\n\nconst app = express();\n\nconst CorsOptions = {\n  origin: \"http://localhost:5173\",\n  methods: \"GET,HEAD,PUT,PATCH,POST,DELETE\",\n  allowedHeaders: \"*\",\n  exposedHeaders: \"*\",\n  credentials: true,\n  // optionsSuccessStatus: 204 // some legacy browsers (IE11, various SmartTVs) choke on 204\n};\n\napp.set(\"trust proxy\", [\"loopback\", \"linklocal\", \"uniquelocal\"]);\napp.use(cors(CorsOptions));\napp.options(\"*\", cors(CorsOptions));\napp.use(logger(\"dev\"));\napp.use(compression());\napp.use(\"/\", express.static(path.join(__dirname, \"static\")));\napp.use(\"/\", express.static(path.join(__dirname, \"../assets\")));\napp.use(\"/\", express.static(path.join(__dirname, \"../../public\")));\napp.use(bodyParser.json());\n\napp.use(\n  bodyParser.urlencoded({\n    extended: true,\n    credentials: true,\n  })\n);\n\n// app.use(flash());\n\napp.set(\"view engine\", \"njk\");\napp.set(\"views\", path.join(__dirname, \"views\"));\n\nconst njk = expressNunjucks(app, {\n  loader: nunjucks.FileSystemLoader,\n});\n\npassport(app);\n\n// app.use((req,res,next)=> {\n//   res.locals.user = req.user\n//   next();\n// })\n\n// app.use(cookieParser());\n\n// app.use(express.static(path.join(__dirname, '../public')))\n\n// nunjucks.configure(__dirname + '/views', {\n//     autoescape: true,\n//     express: app,\n// });\n\n// app.use(express.json())\n// app.use(express.urlencoded({ extended:  false }))\n\n// app.set('views', path.join(__dirname, 'views'));\n\n// app.engine('nunjucks', nunjucks.c)\n\n// app.set('view engine', 'njk');\n\napp.use(routes);\n// app.post('/set', upload.array(), (req, res,next) => {\n//   const userInfo = req.body;\n\n//     try {\n//       console.log(req.body)\n//        console.log(userInfo)\n\n//       //  saveData(userInfo)\n//        res.json(req.body);\n//     } catch (error) {\n//       next(error)\n//     }\n\n// } )\n// app.post('/set', setUser)\n\napp.get(\"*\", function (req, res, next) {\n  let err = new Error(`${req.ip} tried to reach ${req.originalUrl}`); // Tells us which IP tried to reach a particular URL\n  err.statusCode = 404;\n  err.shouldRedirect = true; //New property on err so that our middleware will redirect\n  next();\n});\n\napp.use((req, res, next) => {\n  // Make `user` and `authenticated` available in templates\n  res.locals.user = req.user;\n  res.locals.authenticated = !req.user.anonymous;\n  next();\n});\n\napp.use((err, req, res, next) => {\n  res.status(err.status || 500);\n  res.render(\"error.njk\", {\n    layout: \"base.njk\",\n    message: err.message,\n    error: err.status,\n  });\n});\n\n// app.get('/step1', indexRouter);\n// router.get('/', async  function(req, res, next) {\n//   let  data = {\n//     message: 'Hello world!',\n//     layout:  'base.njk',\n//     title: 'Nunjucks example'\n//   }\n\n//   res.render('index.njk', data)\n// })\n\n// const startServer = async () => {\n//   try {\n//     await mongoose.connect(process.env.MONGO_DB, {\n//       dbName: process.env.DB_NAME,\n//       useNewUrlParser: true,\n//       useUnifiedTopology: true,\n//     });\n//     console.log('MongoDB connected');\n\n//     ViteExpress.listen(app, PORT, () => {\n//       console.log(`Server is listening on port ${PORT}...`);\n//     });\n//   } catch (err) {\n//     console.error('Unable to connect to mongo.');\n//     console.error(err);\n//     process.exit(1);\n//   }\n// };\n\n// startServer();\n\nmongoose()\n  .then(() => {\n    console.log(\"mongo connected\");\n    ViteExpress.listen(app, PORT, () => {\n      console.log(`Server is listening on port ${PORT}...`);\n    });\n  })\n  .catch((err) => {\n    // an error occurred connecting to mongo!\n    // log the error and exit\n    console.error(\"Unable to connect to mongo.\");\n    console.error(err);\n  });\n"],"names":["mongoose","classes","LocalStrategy","app","passport","routes"],"mappings":"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"}