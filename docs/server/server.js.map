{"version":3,"file":"server.js","sources":["../../src/server/models/User.js","../../src/server/controllers/AuthController.js","../../src/server/routes/homeRoutes.js","../../src/server/routes/authRoutes.js","../../src/server/helpers/SurveyHelper.js","../../src/server/controllers/SurveyController.js","../../src/server/routes/surveyRoutes.js","../../src/server/routes/index.js","../../src/server/config/middleware/mongoose.js","../../src/server/config/passport.js","../../src/server.js"],"sourcesContent":["import mongoose, { SchemaTypes } from 'mongoose';\nconst Schema = mongoose.Schema;\nimport passportLocalMongoose from 'passport-local-mongoose';\nimport mongooseAutoPopulate from 'mongoose-autopopulate';\n\nconst WORK_FACTOR = 10;\n\nconst ClassSchema = new Schema({\n  name: {\n    type: String,\n  },\n  teachers: Array,\n  dateStart: Date,\n  dateEnd: Date,\n  weeks: Number,\n  classRating: Number,\n  difficultyRating: Number,\n  explanationRating: Number,\n  personalUnderstanding: String,\n});\n\n\n// ClassSchema.plugin(mongooseAutoPopulate);\n\n\n\nconst UserSchema = new Schema({\n  id: Number,\n  name: String,\n  email: {\n    type: String,\n  },\n  username: {\n    type: String,\n    required: true,\n    index: { unique: true },\n  },\n  password: String,\n  classes: [\n    {\n      type: ClassSchema,\n    },\n  ],\n  admin: Boolean,\n  currentClass: String,\n});\n\n// UserSchema.plugin(mongooseAutoPopulate);\nUserSchema.plugin(passportLocalMongoose);\n\n\n// UserSchema.pre('save', function (next) {\n// \tconst user = this;\n// \t// only hash the password if it has been modified (or is new)\n// \tif (!user.isModified('password')) {\n// \t\treturn next();\n// \t}\n// \t// generate a salt\n// \tbcrypt.genSalt(WORK_FACTOR, function (err, salt) {\n// \t\tif (err) return next(err);\n\n// \t\t// hash the password along with our new salt\n// \t\tbcrypt.hash(user.id, salt, function (err, hash) {\n// \t\t\tif (err) return next(err);\n\n// \t\t\t// override the cleartext id with the hashed one\n// \t\t\tuser.id = hash;\n// \t\t\t// let mongoose know we're done now that we've hashed the plaintext password\n// \t\t\tnext();\n// \t\t});\n// \t});\n// });\n\n// UserSchema.methods.validatePassword = function (candidatePassword) {\n// \treturn new Promise((resolve, reject) => {\n// \t\tUser.compare(candidatePassword, this.password, function (err, isMatch) {\n// \t\t\tif (err) return reject(err);\n// \t\t\tresolve(isMatch);\n// \t\t});\n// \t});\n// };\n\nconst User = mongoose.model('User', UserSchema);\nexport const Class = mongoose.model('Class', ClassSchema);\nexport default User;\n\n\n","import passport from 'passport';\nimport passportLocal from 'passport-local';\nimport User from '../models/User.js';\nimport express from 'express';\nimport jwt from 'passport-jwt';\nconst app = express();\n\nexport const register = async (req, res, next) => {\n  try {\n    \n      let data = {\n        layout: 'layout.njk',\n      };\n\n      res.render('register.njk', data);\n    \n  } catch (err) {\n    let data = {\n      error: { message: err },\n      layout: 'layout.njk',\n    };\n    res.render('register.njk', data);\n    next();\n  }\n};\n\n// export const doRegister = async (req, res, next) => {\n//   let newUser = new User(req.body);\n//   newUser.provider = 'local';\n// \tconst user = await User.findOne({ email: newUser.email }).exec();\n// \tif (!user) {\n// \t\ttry {\n// \t\t\tawait newUser.save();\n//   \t  await req.login(newUser);\n//     \treturn res.redirect('/survey/');\n// \t\t} catch (err) {\n// \t\t\tconsole.log(err)\n// \t\t\treturn res.render('register.njk', {\n// \t\t\t\tlayout: 'layout.njk',\n// \t\t\t\terror: {message: err},\n// \t\t\t\tuser: newUser,\n// \t\t\t});\n// \t\t}\n// \t} else {\n// \t\treturn res.render('register.njk', {\n// \t\t\tlayout: 'layout.njk',\n// \t\t\terror: { message: user },\n// \t\t\tuser: newUser,\n// \t\t});\n// \t}\n// }\n\nexport const doRegister = (req, res, next) => {\n\tconst {username, email, password, name, id} = req.body\n  User.register(\n    new User({username: req.body.username, email: req.body.username, name: req.body.name, id: id,}),\n    username,\n    function (err, user) {\n      if (err) {\n        res.json({\n          success: false,\n          message: 'Your account could not be saved. Error: ' + err,\n        });\n      } else {\n        req.login(user, (er) => {\n          if (er) {\n            res.json({ success: false, message: er });\n          } else {\n            res.redirect('/survey/')\n          }\n        });\n      }\n    }\n  );\n};\n\n// export const doRegister = async (req, res, next) => {\n\n// \t// const user = new User({username: req.body.username})\n// \t// await user.register(req.body.username, req.body.password)\n// \t// await user.save();\n\n// \t// const authenticate = User.authenticate();\n\n// \t// authenticate(req.body.username, req.body.password, function(err, result) {\n// \t// \tif (err) next(err)\n\n// \t// \t// Value 'result' is set to false. The user could not be authenticated since the user is not active\n// \t// });\n// \tconsole.log('registering user');\n// \tUser.register(\n// \t\tnew User({ username: req.body.username, id: req.body.id, name: req.body.name }),\n// \t\treq.body.password,\n// \t\tfunction (err) {\n// \t\t\tif (err) {\n// \t\t\t\tconsole.log('error while user register!', err);\n// \t\t\t\treturn next(err);\n// \t\t\t}\n\n// \t\t\tres.locals.user = req.user;\n// \t\t\tconsole.log('user registered!');\n\n// \t\t\t// req.session.save(function (err) {\n// \t\t\t//   if (err) return next(err);\n// \t\t\t//   res.redirect('/');\n// \t\t\t// });\n\n// \t\t\tres.redirect('/survey/');\n// \t\t}\n// \t\t)\n\n// \t}\n\nexport const login = async (req, res, next) => {\n  try {\n     res.render('login.njk', {\n      layout: 'layout.njk',\n    });\n  } catch (err) {\n\t\tlet data = {\n      error: {message:err},\n      layout: 'layout.njk',\n    };\n    res.render('login.njk', data);\n    next();\n  }\n};\n\n// export const doLogin = (req, res, next) => {\n// \tpassport.authenticate('local', {\n// \tsuccessRedirect: \"/survey/\",\n// \tfailureRedirect: \"/login\",\n// \tfailureFlash: 'failed'\n// },function(req, res, next) {\n// \tpassport.authenticate('local', function(err, user, info) {\n// \t\t\treturn done(null, false, {\n// \t\t\t\t\tmessage: err\n// \t\t\t});\n// \t});\n// })}\n\nexport const doLogin = (req, res, next) => {\n\tconst {username, email, password, name, id} = req.body\n  User.findByUsername(\n    username,\n    username,\n    function (err, user) {\n      if (err) {\n        res.json({\n          success: false,\n          message: 'Your account could not be saved. Error: ' + err,\n        });\n      } else {\n        req.login(user, (er) => {\n          if (er) {\n            res.json({ success: false, message: er });\n          } else {\n            res.redirect('/classes/')\n          }\n        });\n      }\n    }\n  );\n};\n\n\nexport const doLoginOLD = (req, res, next) => {\n\tconst { password, username } = req.body;\n\t\n \t// try {\n\t// \tconst findThisUser = User.findByUsername(username)\n\t// \treturn User.authenticate('local', findThisUser)\n\t// } catch (err) {\n\t// \tnext(err)\n\t// }\n\n\n\n\t\n  if (!req.body.username) {\n    res.json({ success: false, message: 'Username was not given' });\n  } else if (!req.body.password) {\n    res.json({ success: false, message: 'Password was not given' });\n  } else {\n\t\tconsole.log(req.body)\n  passport.authenticate('local', function (err, user, info, status) {\n\n\t\tconsole.log(user)\n      if (err) {\n\t\t\t\tres.json({ success: false, message: 'unknown error' });\n\t\t\t\tnext(err)\n      } else {\n        if (!user) {\n          res.json({\n            success: false,\n            message: 'username or password incorrect',\n          });\n        } else {\n\t\t\t\t\tconst signInUser = User.findByUsername(user.username, user.password)\n\t\t\t\t\tconsole.log(signInUser)\n\t\t\t\t\treq.logIn(user, (er) => {\n\t\t\t\t\t\tif (er) {\n\t\t\t\t\t\t\tres.json({ success: false, message: er });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log('user login')\n\t\t\t\t\t\t\tconsole.log(user)\n\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t// req.login(user, (er) => {\n\t\t\t\t\t// \tif (er) {\n\t\t\t\t\t// \t\tres.json({ success: false, message: er });\n\t\t\t\t\t// \t} else {\n\t\t\t\t\t// \t\tres.json({ success: true, message: 'Your account has been saved' });\n\t\t\t\t\t// \t}\n\t\t\t\t\t// });\n\t\t\t\t\tconsole.log(user)\n          res.redirect('/classes')\n        }\n      }\n    })(req, res, next);\n  }\n};\n\nexport const logout = (req, res, next) => {\n\treq.logOut()\n  req.logout((err) => {\n    if (err) {\n      return next(err);\n    }\n    res.redirect('/');\n  });\n};\n\n// try {\n\n// \t  User.findOne({\n// \t    username: newUser.username,\n// \t  }).exec(function (err, user) {\n// \t    if (err) return next(err);\n// \t    if (!user) {\n// \t      newUser.save(function (err) {\n// \t        if (err) {\n// \t          return res.render('error.njk', {\n// \t            errors: req.flash,\n// \t            user: newUser,\n// \t          });\n// \t        }\n// \t        req.logIn(newUser, function (err) {\n// \t          if (err) return next(err);\n// \t          return res.redirect('/');\n// \t        });\n// \t      });\n// \t    } else {\n// \t      return res.render('error.njk', {\n// \t\t\t\t\tlayout:  'layout.njk',\n// \t        errors: [\n// \t          {\n// \t            message: 'email already registered',\n// \t          },\n// \t        ],\n// \t        user: newUser,\n// \t      });\n// \t    }\n// \t  });\n// } catch (err) {\n// \tnext()\n// }\n\n// Post login\n","import express from  'express';\n\n\nimport {saveData} from '../helpers/saveData.js';\nimport bodyParser from 'body-parser';\nimport multer from 'multer';\nimport User from '../models/User.js';\nconst upload = multer();\nconst router = express.Router();\n\n\nrouter.get('/', (req, res, next) => {\n  try {\n    \n    let  data = {\n      message: 'Hello world!',\n      layout:  'layout.njk',\n      title: 'Nunjucks example',\n      error: {\n        message: req.session.message\n      },\n      user: req.user\n    }\n    console.log('user')\n    console.log(req.user)\n    console.log('body')\n    console.log(req.body)\n    return res.render('index.njk', data)\n  } catch (err) {\n    console.log(err)\n\t\tnext(err);\n  } \n})\n\n\n// router.post('/', upload.array(), async (req, res, next) => {\n//   try {\n//   let data = {\n//     message: 'SPET1',\n//     layout:  'layout.njk',\n//     title: 'SPET1',\n//   }\n//     res.render('index.njk', data)\n//     next()\n//   } catch (err) {\n//     console.log(err)\n// \t\tnext();\n//   }\n// })\n\n\n\nexport default router;\n","\nimport express from  'express';\nimport multer from 'multer';\nimport passport from 'passport';\nimport passportLocal from 'passport-local';\nimport {register, doRegister, login, doLogin, logout} from '../controllers/AuthController.js';\nimport User from '../models/User.js';\n\nconst upload = multer();\nconst router = express.Router();\n\nrouter.get('/login', login);\nrouter.post('/login', upload.array(), doLogin);\n\nrouter.get('/register', register);\nrouter.post('/register', upload.array(), doRegister);\n\nrouter.get('/logout', logout);\nrouter.post('/logout', logout);\n\n\n\n// router.get('/', async (req, res, next) => {\n//   console.log(req.session)\n//   try {\n//     let  data = {\n//       message: 'Hello world!',\n//       layout:  'layout.njk',\n//       title: 'Nunjucks example',\n//       user: req.session.user,\n//       error: {\n//         message: req.session.message\n//       }\n//     }\n    \n//     return res.render('index.njk', data)\n    \n//   } catch (err) {\n//     console.log(err)\n// \t\tnext(err);\n//   } \n// })\n\nexport default router;\n","import User from '../models/User.js';\n\n\nexport const saveClasses = (username, classes) => {\n\treturn new Promise(async (resolve, reject) => {\n\t\t// let {name, teachers, dateStart,dateEnd, weeks, classRating, difficulityRating, explanationRating, personalUnderstanding} = classInfo;\n\t\ttry {\n\t\t\tconst user = await User.findByUsername(username);\n\t\t\t// let newUserInfo = ({\n\t\t\t// \tname: name,\n\t\t\t// \tplatforms: platforms,\n\t\t\t// \tgenres: genres,\n\t\t\t// \tabout: about\n\t\t\t// });\n\n\t\t\tclasses.forEach(element => {\n\t\t\t\tuser.classes.set({\n\t\t\t\t\tname: element,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// user.classes.set({\n\t\t\t// \tname: name,\n\t\t\t// });\n\t\t\tawait user.save();\n\t\t\tresolve('user');\n\t\t} catch (err) {\n\t\t\treject(err);\n\t\t}\n\t});\n};\n\nexport const addClass = (userID, ClassName) => {\n\treturn new Promise(async (resolve, reject) => {\n\t\ttry {\n\t\t\tconsole.log(ClassName)\n\t\t\tconst classItem = {\n\t\t\t\tname: ClassName\n\t\t\t}\n\t\t\tconst user = await User.findById(userID);\n\t\t\tconst checkDup = await user.classes.includes(classItem);\n\t\t\tif (!checkDup) {\n\t\t\t\tawait user.classes.push(classItem);\n\t\t\t\tawait user.save();\n\t\t\t}\n\t\t\tresolve('has resolved');\n\t\t} catch (err) {\n\t\t\treject(err);\n\t\t}\n\t});\n}\n\nexport const myClasses = (userID) => {\n\treturn new Promise(async (resolve, reject) => {\n\t\ttry {\n\t\t\tconst user = await User.findById(userID).select('classes').populate('classes');\n\t\t\tresolve(user.classes);\n\t\t} catch (err) {\n\t\t\treject({\n\t\t\t\ttype: 'error'\n\t\t\t});\n\t\t}\n\t});\n}","import passport from 'passport';\nimport User from '../models/User.js';\nimport {addClass } from '../helpers/SurveyHelper.js';\n\nconst classes = ['css-to-the-rescue', 'web-app-from-scratch', 'browser-technologies', 'progressive-web-apps'];\n\nexport const start = async (req, res, next) => {\n  try {\n    \n    let  data = {\n      message: 'Hello world!',\n      layout:  'layout.njk',\n      title: 'Nunjucks example',\n      user: req.user,\n      classes: classes\n    }\n    console.log('requser');\n    console.log(req.user);\n    res.render('survey-start.njk', data)  \n  } catch (err) {\n\t\tnext(err);\n  }\n}\n\nexport const saveClasses = async (req, res, next) => {\n\t// const classInfo = req.body;\n  \n  const {user} = req.user;\n  \n  console.log(req.body)\n\n\t\n  // console.log(userID)\n\ttry {\n    const userID = req.user._id;\n    const selectedClasses = req.body.classes;\n    console.log(selectedClasses);\n\n    await selectedClasses.forEach(async element => {\n      const alreadyExists = req.user.classes.some(item => item.name == element)\n\n      if (alreadyExists) {\n        console.log(`${element} already in user classes`)\n      } else {\n        await addClass(userID, element);\n      }\n    });\n  res.redirect(`/survey/${user.classes[0]}`);\n    next()\n\t} catch (err) {\n\t\tnext(err);\n\t}\n};\n\nexport const surveyClass = async (req, res, next) => {\n  const classPage = req.params.id\n\n  try {\n    let  data = {\n      message: 'Hello world!',\n      layout:  'layout.njk',\n      title: 'Nunjucks example',\n      user: req.user,\n      classes: req.user.classes\n    }\n    res.render('survey-class.njk', data)  \n  } catch (err) {\n\t\tnext(err);\n    \n  }\n}","\nimport express from  'express';\nimport multer from 'multer';\nimport {isAuthenticated} from '../config/middleware/auth.js';\nimport {register, doRegister, login, doLogin} from '../controllers/AuthController.js';\nimport {start, surveyClass, saveClasses} from '../controllers/SurveyController.js';\nimport User from '../models/User.js';\n\nimport connectEnsureLogin from 'connect-ensure-login';\n\nconst Classes = [{\n  name: \"Css to the rescue\",\n  teachers: [\"Sanne\", \"Vasilis\"],\n  dateStart: Date,\n  dateEnd: Date,\n  weeks: Number,\n  classRating: Number,\n  difficultyRating: Number,\n  explanationRating: Number,\n  personalUnderstanding: String\n}]\n\n\nconst upload = multer();\nconst router = express.Router();\nrouter.get('/', start);\nrouter.post('/start', upload.array(), saveClasses);\n\nrouter.get('/classes', surveyClass);\n\n// router.get('/welcome', requiresLogin , welcome);\n\n\n// router.post('/login',upload.array(), doLogin);\n\n// router.get('/register', register);\n// router.post('/register', upload.array(), doRegister);\n\n\nexport default router;\n","import express from  'express'\n\n\nimport {saveData} from '../helpers/saveData.js'\nimport bodyParser from 'body-parser';\nimport multer from 'multer';\nimport User from '../models/User.js'\nconst upload = multer();\nimport {register, doRegister, login, doLogin} from '../controllers/AuthController.js'\n// import {default as homeRoutes} from './homeRoutes.js';\nimport connectEnsureLogin from 'connect-ensure-login';\nimport homeRoutes from \"./homeRoutes.js\";\nimport authRoutes from \"./authRoutes.js\";\nimport surveyRoutes from \"./surveyRoutes.js\";\nimport { isAuthenticated } from '../config/middleware/auth.js';\n\nlet router = express.Router();\n// export const indexRouter = (req, res, next) => {\n\n// }\n\n\nrouter.get('/', homeRoutes);\nrouter.use('/', authRoutes);\nrouter.use('/classes', surveyRoutes);\n\n// router.get('/welcome', async (req, res, next)=> {\n// const user = req.user;\n\n// try {\n  \n// } catch (error) {\n  \n// }\n\n\n// })\n\n\n// module.exports = router\n\n\nexport default router;\n\n\n\n\n","import mongoose from 'mongoose';\nimport session from 'express-session';\nexport default () => {\n\tmongoose.Promise = global.Promise;\n\treturn mongoose.connect(process.env.MONGO_DB, {\n\t\tdbName: process.env.DB_NAME,\n\t\tuseNewUrlParser: true,\n\t\tuseUnifiedTopology: true,\n\t});\n}\n","import session from 'express-session';\nimport cookieParser from 'cookie-parser';\nimport cookieSession from 'cookie-session';\nimport passport from 'passport';\nimport flash from 'connect-flash';\nimport {Strategy as LocalStrategy} from 'passport-local';\n// import LocalStrategy from 'passport-local-mongoose';\n\nimport User from '../models/User.js';\nimport mongoose from 'mongoose';\nimport { connect } from 'mongoose';\n\nconst newLocalStrategy = LocalStrategy.Strategy;\n// const newMongoStore = MongoStore(session)\n\n\nexport default function(app) {\n\tapp.use(cookieParser(process.env.SESSION_SECRET))\n\t// app.use(cookieSession({\n\t// \tkeys: [process.env.SESSION_SECRET, 'key2']\n\t// }))\n\tapp.use(session({\n\t\t// this should be changed to something cryptographically secure for production\n\t\tsecret: process.env.SESSION_SECRET,\n\t\tresave: false,\n\t\tsaveUninitialized: true,\n\t\t// automatically extends the session age on each request. useful if you want\n\t\t// the user's activity to extend their session. If you want an absolute session\n\t\t// expiration, set to false\n\t\trolling: true,\n\t\tname: 'localhost',\n\t\t// set your options for the session cookie\n\t\tcookie: {\n\t\t\thttpOnly: false,\n\t\t\tsameSite: false,\n\t\t\t// the duration in milliseconds that the cookie is valid\n\t\t\tmaxAge: 60 * 60 * 1000, // 20 minutes\n\t\t\t// recommended you use this setting in production if you have a well-known domain you want to restrict the cookies to.\n\t\t\t// domain: 'party-finderr.herokuapp.com',\n\t\t\t// recommended you use this setting in production if your site is published using HTTPS\n\t\t\t// secure: true,\n\t\t}\n\t}));\n\t\n\t// passport.serializeUser((user, done) => {\n\t// \tdone(null, user);\n\t// });\n\t// passport.deserializeUser(async (userId, done) => {\n\t// \tawait User.findById(userId.id)\n\t// \t\t.then(function (user) {\n\t// \t\t\tdone(null, user);\n\t// \t\t})\n\t// \t\t.catch(function (err) {\n\t// \t\t\tdone(err);\n\t// \t\t});\n\t// });\n\n\t// passport.use(User.createStrategy());\n\n\t// passport.use(new LocalStrategy.Strategy(User.authenticate()));\n\nconst authUser = (user, password, done) => {\n\t\t//Search the user, password in the DB to authenticate the user\n\t\t//Let's assume that a search within your DB returned the username and password match for \"Kyle\".\n\t\t\t return done (null, authenticated_user )\n\t\t}\n\n\tpassport.use(User.createStrategy())\n\n\t// passport.use(new LocalStrategy(\n\t// \tfunction(user, password, done) {\n\t// \t\tconsole.log(user)\n\t// \t\tUser.findByUsername({ username: user, selectHashSaltFields: true }, function(err, user) {\n\t// \t\t\tif (err) { return done(err); }\n\t// \t\t\tif (!user) { return done(null, false); }\n\t// \t\t\tif (!user.validPassword(password)) { return done(null, false); }\n\t// \t\t\treturn done(null, {user});\n\t// \t\t});\n\t// \t}\n\t// ));\n\n\t// passport.serializeUser(function(user, done) {\n\t// \tdone(null, user);\n\t//  });\n\t \n\t \n\t//  passport.deserializeUser(function(user, done) {\n\t// \tdone(null, user);\n\t//  });\n\t//  passport.serializeUser(function(user, done) {\n\t// \tdone(null, user.id);\n\t// });\n\t\n\t// passport.deserializeUser(function(id, done) {\n\t// \tUser.findById(_id, function (err, user) {\n\t// \t\tif(err){\n  //       done(null, false, {error:err});\n  //   } else {\n  //       done(null, user);\n  //   }\n\t// \t});\n\t// });\n\tpassport.serializeUser(User.serializeUser());\n\tpassport.deserializeUser(User.deserializeUser());\n\t// passport.use(new LocalStrategy((usernameField, passwordField, done) => {\n\t// \tconst errorMsg = 'Invalid username or password';\n\t// \tUser.findOne({\n\t// \t\tusername: usernameField,\n\t// \t\tpassword: usernameField,\n\t// \t\tpassReqToCallback : true\n\t// \t})\n\t// \t\t.then(user => {\n\t// \t\t\t// if no matching user was found...\n\t// \t\t\tif (!user) {\n\t// \t\t\t\treturn done(null, false, {\n\t// \t\t\t\t\tmessage: errorMsg\n\t// \t\t\t\t});\n\t// \t\t\t}\n\t// \t\t\t// call our validate method, which will call done with the user if the\n\t// \t\t\t// passwords match, or false if they don't\n\t// \t\t\treturn user.validatePassword(password)\n\t// \t\t\t\t.then(isMatch => done(null, isMatch ? user : false, isMatch ? null : {\n\t// \t\t\t\t\tmessage: errorMsg\n\t// \t\t\t\t}));\n\t// \t\t})\n\t// \t\t.catch(done);\n\t// }));\n\t// initialize passport. this is required, after you set up passport but BEFORE you use passport.session (if using)\n\tapp.use(passport.initialize());\n\t// only required if using sessions. this will add middleware from passport\n\t// that will serialize/deserialize the user from the session cookie and add\n\t// them to req.user\n\tapp.use(passport.session());\n\n\n\n\t\n}\n\n\n// export default passportMiddleware;\n\n// const { MongoClient, ServerApiVersion } = require('mongodb');\n// const uri = \"mongodb+srv://admin:<password>@browsertech.amdujfn.mongodb.net/?retryWrites=true&w=majority\";\n// const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true, serverApi: ServerApiVersion.v1 });\n// client.connect(err => {\n//   const collection = client.db(\"test\").collection(\"devices\");\n//   // perform actions on the collection object\n//   client.close();\n// });\n\n// 'mongodb+srv://admin:<password>@browsertech.amdujfn.mongodb.net/?retryWrites=true&w=majority'\n\n\n","import express from 'express';\nimport ViteExpress from 'vite-express';\nimport { createServer as createViteServer } from 'vite';\nimport bodyParser from 'body-parser';\nimport nunjucks from 'nunjucks';\nimport expressNunjucks from 'express-nunjucks';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport logger from 'morgan';\nimport flash from 'connect-flash';\nimport cookieParser from 'cookie-parser';\nimport dotenv from 'dotenv';\nimport fs from 'node:fs';\nimport multer from 'multer';\nimport routes from './server/routes/index.js';\n// import mongoose from 'mongoose';\nimport mongoose from './server/config/middleware/mongoose.js';\nimport passport from './server/config/passport.js';\nimport cors from 'cors';\nimport compression from 'compression';\n\n\ndotenv.config();\n\n// const isDev = process.env.NODE_ENV === 'development'\n\nconst upload = multer();\nconst PORT = process.env.PORT || 3000;\n\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// const classes = \"web-app-from-scratch\", \"css-to-the-rescue-2223\"\n\n// const classes = [{\n//   web-app-from-scratch: {\n\n//   },\n//   css-to-the-rescue-2223: {\n\n//   }\n// }\n\n// ]\n\n\nconst app = express();\napp.set('trust proxy', ['loopback', 'linklocal', 'uniquelocal'])\napp.use(logger('dev'));\napp.use(compression())\napp.use('/', express.static(path.join(__dirname, 'public')));\napp.use('/', express.static(path.join(__dirname, 'static')));\napp.use(bodyParser.json());\n\napp.use(\n  bodyParser.urlencoded({\n    extended: true,\n  })\n);\n\n// app.use(flash());\n\n\n\napp.set('view engine', 'njk');\napp.set('views', path.join(__dirname, 'server/views'));\n\n\nconst njk = expressNunjucks(app, {\n  loader: nunjucks.FileSystemLoader,\n});\n\npassport(app);\n\n// app.use((req,res,next)=> {\n//   res.locals.user = req.user\n//   next();\n// })\n\n// app.use(cookieParser());\n\n// app.use(express.static(path.join(__dirname, '../public')))\n\n// nunjucks.configure(__dirname + '/views', {\n//     autoescape: true,\n//     express: app,\n// });\n\n// app.use(express.json())\n// app.use(express.urlencoded({ extended:  false }))\n\n// app.set('views', path.join(__dirname, 'views'));\n\n// app.engine('nunjucks', nunjucks.c)\n\n// app.set('view engine', 'njk');\n\napp.use(routes);\n// app.post('/set', upload.array(), (req, res,next) => {\n//   const userInfo = req.body;\n\n//     try {\n//       console.log(req.body)\n//        console.log(userInfo)\n\n//       //  saveData(userInfo)\n//        res.json(req.body);\n//     } catch (error) {\n//       next(error)\n//     }\n\n// } )\n// app.post('/set', setUser)\n\napp.get('*', function (req, res, next) {\n  let err = new Error(`${req.ip} tried to reach ${req.originalUrl}`); // Tells us which IP tried to reach a particular URL\n  err.statusCode = 404;\n  err.shouldRedirect = true; //New property on err so that our middleware will redirect\n  next();\n});\n\napp.use((req, res, next) => {\n  // Make `user` and `authenticated` available in templates\n  res.locals.user = req.user\n  res.locals.authenticated = !req.user.anonymous\n  next()\n})\n\napp.use((err, req, res, next) => {\n  res.status(err.status || 500);\n  res.render('error.njk', {\n    layout: 'layout.njk',\n    message: err.message,\n    error: err,\n  });\n});\n\n\n// app.get('/step1', indexRouter);\n// router.get('/', async  function(req, res, next) {\n//   let  data = {\n//     message: 'Hello world!',\n//     layout:  'layout.njk',\n//     title: 'Nunjucks example'\n//   }\n\n//   res.render('index.njk', data)\n// })\n\n\n// const startServer = async () => {\n//   try {\n//     await mongoose.connect(process.env.MONGO_DB, {\n//       dbName: process.env.DB_NAME,\n//       useNewUrlParser: true,\n//       useUnifiedTopology: true,\n//     });\n//     console.log('MongoDB connected');\n    \n//     ViteExpress.listen(app, PORT, () => {\n//       console.log(`Server is listening on port ${PORT}...`);\n//     });\n//   } catch (err) {\n//     console.error('Unable to connect to mongo.');\n//     console.error(err);\n//     process.exit(1);\n//   }\n// };\n\n// startServer();\n\n\nmongoose()\n  .then(() => {\n    console.log('mongo connected');\n    ViteExpress.listen(app, PORT, () => {\n    \n      console.log(`Server is listening on port ${PORT}...`);\n    })\n  }).catch((err) => {\n    // an error occurred connecting to mongo!\n    // log the error and exit\n    console.error('Unable to connect to mongo.');\n    console.error(err);\n  });\n\n"],"names":["mongoose","router","upload","homeRoutes","authRoutes","surveyRoutes","LocalStrategy","app","passport","routes"],"mappings":"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"}